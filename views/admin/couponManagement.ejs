<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Nest Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <meta name="description" content="" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content="" />
    <meta property="og:type" content="" />
    <meta property="og:url" content="" />
    <meta property="og:image" content="" />
    <!-- Favicon -->
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="assets/imgs/theme/favicon.svg"
    />
    <!-- Template CSS -->
    <link href="/assets/css/main.css?v=1.1" rel="stylesheet" type="text/css" />
  </head>

  <body>
    <%- include('../partials/sidenav.ejs') -%>
    <main class="main-wrap">
      <!-- Modal -->
      <div
        class="modal fade"
        id="exampleModal"
        tabindex="-1"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="exampleModalLabel">
                Create coupon
              </h1>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <form action="/admin/create-coupon" method="post">
                <label for="form-label">Name</label>
                <input
                  type="text"
                  name="name"
                  placeholder="Enter coupon name"
                  class="form-control"
                />

                <label for="form-label">Activation date</label>
                <input
                  type="date"
                  name="adate"
                  placeholder="dd-mm-yyyy"
                  class="form-control"
                />

                <label for="form-label">Expire date</label>
                <input
                  type="date"
                  name="edate"
                  placeholder="dd-mm-yyyy"
                  class="form-control"
                />

                <label for="form-label">Limit of use</label>
                <input
                  type="number"
                  name="limit"
                  placeholder="enter how many user can use"
                  class="form-control"
                />

                <label for="form-label">Discount Percentage</label>
                <input type="number" name="percentage" placeholder="Enter discount Percentage (%)" class="form-control" />

                <label for="form-label">Maximum Discount Amount</label>
                <input type="number" name="maxDiscountAmount" placeholder="Enter Maximum Discount Amount (e.g., 150)" class="form-control" />
            
                <label for="form-label">Minimum Order Value</label>
                <input type="number" name="minOrderValue" placeholder="Enter minimum order value (e.g., 300)" class="form-control" />
            
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
            </div>
          </div>
        </div>
      </div>

      <!-- edit coupon modal -->
      <div
        class="modal fade"
        id="exampleModal2"
        tabindex="-1"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="exampleModalLabel">
                Edit coupon
              </h1>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <form action="/admin/edit-coupon?_method=PUT" method="post">
                <label for="form-label">Name</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter coupon name"
                  class="form-control"
                />
                <input type="text" id="couponId" name="id" hidden />

                <label for="form-label">Activation date</label>
                <input
                  type="date"
                  id="adate"
                  name="adate"
                  placeholder="dd-mm-yyyy"
                  class="form-control"
                />

                <label for="form-label">Expire date</label>
                <input
                  type="date"
                  id="edate"
                  name="edate"
                  placeholder="dd-mm-yyyy"
                  class="form-control"
                />

                <label for="form-label">Limit of use</label>
                <input
                  type="number"
                  id="limit"
                  name="limit"
                  placeholder="enter how many user can use"
                  class="form-control"
                />

                <label for="form-label">Discount Percentage</label>
                <input type="number" id="percentage" name="percentage" placeholder="Enter discount Percentage (%)" class="form-control" />

                <label for="form-label">Maximum Discount Amount</label>
                <input type="number" id="maxDiscountAmount" name="maxDiscountAmount" placeholder="Enter Maximum Discount Amount (e.g., 150)" class="form-control" />
            

                <label for="form-label">Minimum Order Value</label>
                <input
                  type="number"
                  id="mamount"
                  name="minOrderValue"
                  placeholder="Enter minimum order value"
                  class="form-control"
                />

                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Close
                  </button>
                  <button type="submit" class="btn btn-primary">
                    Save changes
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <section class="content-main">
        <div class="content-header">
          <h2 class="content-title">Manage Coupon</h2>
          <div>
            <button
              href="#"
              class="btn btn-dark"
              data-bs-toggle="modal"
              data-bs-target="#exampleModal"
            >
              <i class="material-icons md-plus"></i> Create coupon
            </button>
          </div>
        </div>
        <div class="card mb-4">
          <!-- card-header end// -->
          <div class="card-body">
            <div class="table-responsive" id="Reload">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Coupon Name</th>
                    <th>Coupon code</th>

                    <th>Activation date</th>
                    <th>Expire date</th>
                    <th>Discount amount</th>
                    <th class="text-end">Action</th>
                  </tr>
                </thead>
                <tbody>
                  <% if(Array.isArray(coupon) && coupon.length> 0) {%> <%
                  coupon.map((c)=> {%>
                  <tr>
                    <td width="40%">
                      <a href="#" class="itemside">
                        <div class="info pl-3">
                          <h6
                            class="mb-0 title"
                            style="text-transform: capitalize"
                          >
                            <%= c.name %>
                          </h6>
                        </div>
                      </a>
                    </td>
                    <td><%= c.couponCode %></td>
                    <td><%= moment(c.activationDate).format('DD MM YYYY') %></td>
                    <td><%= moment(c.expiresDate).format('DD MM YYYY') %></td>
                    <td><%= c.percentage %>%</td>



                    <td class="text-end">
                      <button
                        id="button"
                        class="btn btn-sm btn-dark rounded font-sm mt-15"
                        data-user-id=""
                        data-status=""
                        onclick="deleteCoupon('<%= c._id %>')"
                      >
                        Delete
                      </button>
                      <button
                        id="button"
                        class="btn btn-sm btn-dark rounded font-sm mt-15"
                        data-user-id=""
                        onclick="return editCoupon('<%= c._id %>', '<%= c.name %>', '<%= c.activationDate %>', '<%= c.expiresDate %>', '<%= c.percentage %>', '<%= c.limit %>','<%= c.minimumOrderValue %>','<%= c.maxDiscountAmount %>')"
                        data-status=""
                        data-bs-toggle="modal"
                        data-bs-target="#exampleModal2"
                      >
                        Edit
                      </button>
                    </td>
                  </tr>

                  <% }) %> <% }else{ %>
                  <tr>
                    <td colspan="5">No coupon found</td>
                  </tr>
                  <% } %>
                </tbody>
              </table>
              <!-- table-responsive.// -->
            </div>
          </div>
          <!-- card-body end// -->
        </div>
        <!-- card end// -->
        <div class="pagination-area mt-15 mb-50">
          <nav aria-label="Page navigation example">
            <ul class="pagination">
              <% if(page > 0) { %>
              <li class="page-item">
                <a class="page-link" href="?page=<%= page - 1 %>">
                  <i class="material-icons md-chevron_left"></i>
                </a>
              </li>
              <% } %> <% for (let i = 0; i < totalPages; i++) { %> <% if (i ===
              0 || i === totalPages - 1 || (i >= page - 2 && i <= page + 2)) {
              %>
              <li class="page-item <%= page == i ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i + 1 %></a>
              </li>
              <% } else if (i === page - 3 || i === page + 3) { %>
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
              <% } %> <% } %> <% if(page < totalPages - 1) { %>
              <li class="page-item">
                <a class="page-link" href="?page=<%= page + 1 %>">
                  <i class="material-icons md-chevron_right"></i>
                </a>
              </li>
              <% } %>
            </ul>
          </nav>
        </div>
      </section>
      <!-- content-main end// -->
      <%- include('../partials/adminFooter.ejs') -%>
    </main>

    <script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/assets/js/vendors/select2.min.js"></script>
    <script src="/assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="/assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- // sweat alert -->
    <script src="/node_modules/sweetalert2/dist/sweetalert2.all.min.js"></script>
    <!-- Main Script -->
    <script src="/assets/js/main.js?v=1.1" type="text/javascript"></script>
  </body>
</html>

<script>
  function deleteCoupon(id) {
    const data = { id: id };

    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to delete this coupon?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((decision) => {
      if (decision.isConfirmed) {
        $.ajax({
          method: "DELETE",
          url: "/admin/deleteCoupon",
          data: JSON.stringify(data),
          contentType: "application/json",
          success: (response) => {
            if (response.success) {
              // Reload the current page to update the coupon list and pagination
              window.location.reload();
            } else {
              Swal.fire({
                title: "Failed to delete coupon",
                icon: "error",
              });
            }
          },
          error: (xhr, status, error) => {
            Swal.fire({
              title: "An error occurred",
              text: error,
              icon: "error",
            });
          },
        });
      }
    });
  }
</script>

<script>
  function editCoupon(id, name, adate, edate, percentage, limit, minimumOrderValue,maxDiscountAmount) {
    console.log("Function called with the following parameters:");
    console.log("ID:", id);
    console.log("Name:", name);
    console.log("Activation Date:", adate);
    console.log("Expiration Date:", edate);
    console.log("Discount Amount:", percentage);
    console.log("Limit:", limit);
    console.log("Minimum Order Value:", minimumOrderValue);
    console.log("Minimum Order Value:", maxDiscountAmount);

    
    document.getElementById("couponId").value = id;
    document.getElementById("name").value = name;

    // Assuming adate and edate need to be formatted for date inputs
    document.getElementById("adate").value = formatDateForInput(adate);
    document.getElementById("edate").value = formatDateForInput(edate);

    document.getElementById("percentage").value = percentage;
    document.getElementById("limit").value = limit;
    document.getElementById("mamount").value = minimumOrderValue;
    document.getElementById("maxDiscountAmount").value = maxDiscountAmount;

    
    return;
  }

  function formatDateForInput(dateString) {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
document.addEventListener("DOMContentLoaded", function () {
  attachFormValidation("#exampleModal form");
  attachFormValidation("#exampleModal2 form");

  function attachFormValidation(formSelector) {
    const form = document.querySelector(formSelector);

    form.addEventListener("submit", async function (event) {
      event.preventDefault();
      clearErrorMessages(form);

      let name = form.elements.name.value.trim();
      const adate = form.elements.adate.value.trim();
      const edate = form.elements.edate.value.trim();
      const limit = form.elements.limit.value.trim();
      const percentage = form.elements.percentage.value.trim();
      const minOrderValue = form.elements.minOrderValue.value.trim();
      const maxDiscountAmount = form.elements.maxDiscountAmount.value.trim();

      // Remove special characters from name (allow only letters, numbers, spaces, hyphens, and underscores)
      name = name.replace(/[^a-zA-Z0-9-_ ]/g, '');

      // General empty field validation
      const requiredFields = ["name", "adate", "edate", "limit", "percentage", "minOrderValue", "maxDiscountAmount"];
      for (const fieldName of requiredFields) {
        if (form.elements[fieldName].value.trim() === "") {
          displayErrorMessage(form, fieldName, `Please enter a ${fieldName.replace(/([A-Z])/g, ' $1').toLowerCase()}.`);
          return;
        }
      }
       // Check if the name is empty or contains only special characters
        const specialCharacterRegex = /^[^a-zA-Z0-9]+$/;
        const containsSpecialCharacterRegex = /^[!@#\$%\^\&*\)\(+=._-]+$/g;

        if (name === "" || specialCharacterRegex.test(name)) {
          displayErrorMessage(form, "name", "Coupon name cannot be empty or contain only special characters.");
          return;
        }

        if (containsSpecialCharacterRegex.test(name)) {
          displayErrorMessage(form, "name", "Coupon name cannot start with a special character.");
          return;
        }

      // Validate dates
      const currentDate = new Date().setHours(0, 0, 0, 0); // Midnight today
      const activationDate = new Date(adate).setHours(0, 0, 0, 0);
      const expirationDate = new Date(edate).setHours(0, 0, 0, 0);

      if (isNaN(activationDate)) {
        displayErrorMessage(form, "adate", "Please enter a valid activation date.");
        return;
      }

      if (isNaN(expirationDate)) {
        displayErrorMessage(form, "edate", "Please enter a valid expiration date.");
        return;
      }

      if (activationDate < currentDate) {
        displayErrorMessage(form, "adate", "Activation date must be today or in the future.");
        return;
      }

      if (expirationDate <= activationDate) {
        displayErrorMessage(form, "edate", "Expiration date must be after the activation date.");
        return;
      }

      // Validate limit
      if (isNaN(parseInt(limit)) || parseInt(limit) <= 0) {
        displayErrorMessage(form, "limit", "Limit of use must be a valid number greater than zero.");
        return;
      }

      // Validate percentage
      if (isNaN(parseFloat(percentage)) || parseFloat(percentage) <= 0 || parseFloat(percentage) >= 80) {
        displayErrorMessage(form, "percentage", "Percentage must be a valid number between 1% and 79%.");
        return;
      }

      // Validate min order value
      if (isNaN(parseFloat(minOrderValue)) || parseFloat(minOrderValue) <= 0) {
        displayErrorMessage(form, "minOrderValue", "Minimum order value must be a valid number greater than zero.");
        return;
      }

      // Validate max discount amount
      if (isNaN(parseFloat(maxDiscountAmount)) || parseFloat(maxDiscountAmount) <= 0) {
        displayErrorMessage(form, "maxDiscountAmount", "Max discount amount must be a valid number greater than zero.");
        return;
      }

      // Ensure max discount amount does not exceed min order value
      if (parseFloat(maxDiscountAmount) > parseFloat(minOrderValue)) {
        displayErrorMessage(form, "maxDiscountAmount", "Max discount amount cannot exceed the minimum order value.");
        return;
      }

      // Skip name existence check for #exampleModal2 (editing existing record)
      if (formSelector === "#exampleModal form") {
        try {
          // Check for existing coupon name
          const response = await fetch('/admin/check-coupon-name', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name })
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const result = await response.json();
          if (result.exists) {
            displayErrorMessage(form, "name", "Coupon with this name already exists.");
            return;
          }
        } catch (error) {
          displayErrorMessage(form, "name", "There was an error validating the coupon name. Please try again.");
          return;
        }
      }

      // Disable submit button to prevent double submission
      form.querySelector('button[type="submit"]').disabled = true;

      // Proceed with form submission if all checks pass
      event.target.submit();
    });
  }

  function displayErrorMessage(form, fieldName, message) {
    const field = form.elements[fieldName];
    const errorDiv = document.createElement("div");
    errorDiv.className = "error-message";
    errorDiv.style.color = "red";
    errorDiv.textContent = message;
    field.parentNode.insertBefore(errorDiv, field);

    setTimeout(() => {
      errorDiv.remove();
    }, 3000);
  }

  function clearErrorMessages(form) {
    const errorMessages = form.querySelectorAll(".error-message");
    errorMessages.forEach((errorMessage) => {
      errorMessage.remove();
    });
  }
});
</script>



